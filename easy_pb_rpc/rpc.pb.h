// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef PROTOBUF_rpc_2eproto__INCLUDED
#define PROTOBUF_rpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace RPC {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rpc_2eproto();
void protobuf_AssignDesc_rpc_2eproto();
void protobuf_ShutdownFile_rpc_2eproto();

class RpcRequestData;
class RpcResponseData;

// ===================================================================

class RpcRequestData : public ::google::protobuf::Message {
 public:
  RpcRequestData();
  virtual ~RpcRequestData();
  
  RpcRequestData(const RpcRequestData& from);
  
  inline RpcRequestData& operator=(const RpcRequestData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcRequestData& default_instance();
  
  void Swap(RpcRequestData* other);
  
  // implements Message ----------------------------------------------
  
  RpcRequestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcRequestData& from);
  void MergeFrom(const RpcRequestData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 service_id = 1;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 service_id() const;
  inline void set_service_id(::google::protobuf::uint32 value);
  
  // required uint32 method_id = 2;
  inline bool has_method_id() const;
  inline void clear_method_id();
  static const int kMethodIdFieldNumber = 2;
  inline ::google::protobuf::uint32 method_id() const;
  inline void set_method_id(::google::protobuf::uint32 value);
  
  // required uint32 call_id = 3;
  inline bool has_call_id() const;
  inline void clear_call_id();
  static const int kCallIdFieldNumber = 3;
  inline ::google::protobuf::uint32 call_id() const;
  inline void set_call_id(::google::protobuf::uint32 value);
  
  // required bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  
  // @@protoc_insertion_point(class_scope:RPC.RpcRequestData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 service_id_;
  ::google::protobuf::uint32 method_id_;
  ::google::protobuf::uint32 call_id_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcRequestData* default_instance_;
};
// -------------------------------------------------------------------

class RpcResponseData : public ::google::protobuf::Message {
 public:
  RpcResponseData();
  virtual ~RpcResponseData();
  
  RpcResponseData(const RpcResponseData& from);
  
  inline RpcResponseData& operator=(const RpcResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResponseData& default_instance();
  
  void Swap(RpcResponseData* other);
  
  // implements Message ----------------------------------------------
  
  RpcResponseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RpcResponseData& from);
  void MergeFrom(const RpcResponseData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 call_id = 1;
  inline bool has_call_id() const;
  inline void clear_call_id();
  static const int kCallIdFieldNumber = 1;
  inline ::google::protobuf::uint32 call_id() const;
  inline void set_call_id(::google::protobuf::uint32 value);
  
  // required bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  
  // @@protoc_insertion_point(class_scope:RPC.RpcResponseData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 call_id_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  friend void  protobuf_AddDesc_rpc_2eproto();
  friend void protobuf_AssignDesc_rpc_2eproto();
  friend void protobuf_ShutdownFile_rpc_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RpcResponseData* default_instance_;
};
// ===================================================================


// ===================================================================

// RpcRequestData

// required uint32 service_id = 1;
inline bool RpcRequestData::has_service_id() const {
  return _has_bit(0);
}
inline void RpcRequestData::clear_service_id() {
  service_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 RpcRequestData::service_id() const {
  return service_id_;
}
inline void RpcRequestData::set_service_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  service_id_ = value;
}

// required uint32 method_id = 2;
inline bool RpcRequestData::has_method_id() const {
  return _has_bit(1);
}
inline void RpcRequestData::clear_method_id() {
  method_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 RpcRequestData::method_id() const {
  return method_id_;
}
inline void RpcRequestData::set_method_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  method_id_ = value;
}

// required uint32 call_id = 3;
inline bool RpcRequestData::has_call_id() const {
  return _has_bit(2);
}
inline void RpcRequestData::clear_call_id() {
  call_id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 RpcRequestData::call_id() const {
  return call_id_;
}
inline void RpcRequestData::set_call_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  call_id_ = value;
}

// required bytes content = 4;
inline bool RpcRequestData::has_content() const {
  return _has_bit(3);
}
inline void RpcRequestData::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RpcRequestData::content() const {
  return *content_;
}
inline void RpcRequestData::set_content(const ::std::string& value) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RpcRequestData::set_content(const char* value) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RpcRequestData::set_content(const void* value, size_t size) {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcRequestData::mutable_content() {
  _set_bit(3);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}

// -------------------------------------------------------------------

// RpcResponseData

// required uint32 call_id = 1;
inline bool RpcResponseData::has_call_id() const {
  return _has_bit(0);
}
inline void RpcResponseData::clear_call_id() {
  call_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 RpcResponseData::call_id() const {
  return call_id_;
}
inline void RpcResponseData::set_call_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  call_id_ = value;
}

// required bytes content = 2;
inline bool RpcResponseData::has_content() const {
  return _has_bit(1);
}
inline void RpcResponseData::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RpcResponseData::content() const {
  return *content_;
}
inline void RpcResponseData::set_content(const ::std::string& value) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RpcResponseData::set_content(const char* value) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void RpcResponseData::set_content(const void* value, size_t size) {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RpcResponseData::mutable_content() {
  _set_bit(1);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RPC

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rpc_2eproto__INCLUDED
